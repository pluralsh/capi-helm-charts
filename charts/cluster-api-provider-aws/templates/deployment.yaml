apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cluster-api-provider-aws.fullname" . }}-controller-manager
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
    control-plane: capa-controller-manager
  {{- include "cluster-api-provider-aws.labels" . | nindent 4 }}
  {{- with .Values.controllerManager.labels }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
  annotations:
  {{- with .Values.controllerManager.annotations }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.controllerManager.replicas }}
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: infrastructure-aws
      control-plane: capa-controller-manager
    {{- include "cluster-api-provider-aws.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/provider: infrastructure-aws
        control-plane: capa-controller-manager
      {{- include "cluster-api-provider-aws.selectorLabels" . | nindent 8 }}
      annotations:
        iam.amazonaws.com/role: {{ .Values.configVariables.awsControllerIamRole }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: {{ .Values.configVariables.k8SCpLabel }}
                operator: Exists
            weight: 10
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
            weight: 10
      containers:
      - args:
        - --leader-elect
        - --feature-gates=EKS={{ .Values.configVariables.capaEks }},EKSEnableIAM={{ .Values.configVariables.capaEksIam }},EKSAllowAddRoles={{ .Values.configVariables.capaEksAddRoles }},EKSFargate={{ .Values.configVariables.exprimental.eksFargate }},MachinePool={{ .Values.configVariables.exprimental.machinePool }},EventBridgeInstanceState={{ .Values.configVariables.eventBridgeInstanceState }},AutoControllerIdentityCreator={{ .Values.configVariables.autoControllerIdentityCreator }},BootstrapFormatIgnition={{ .Values.configVariables.exprimental.bootstrapFormatIgnition }},ExternalResourceGC={{ .Values.configVariables.exprimental.externalResourceGc }},AlternativeGCStrategy={{ .Values.configVariables.exprimental.alternativeGcStrategy }},TagUnmanagedNetworkResources={{ .Values.configVariables.tagUnmanagedNetworkResources }}
        - --v={{ .Values.configVariables.capaLoglevel }}
        - --metrics-bind-addr=0.0.0.0:8080
        env:
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: {{ quote .Values.controllerManager.manager.env.awsSharedCredentialsFile }}
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.controllerManager.manager.image.repository }}:{{ .Values.controllerManager.manager.image.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.controllerManager.manager.imagePullPolicy }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: healthz
          periodSeconds: 10
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 9440
          name: healthz
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: healthz
        resources: {{- toYaml .Values.controllerManager.manager.resources | nindent 10 }}
        securityContext: {{- toYaml .Values.controllerManager.manager.containerSecurityContext | nindent 10 }}
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        - mountPath: /home/.aws
          name: credentials
      imagePullSecrets: {{ .Values.imagePullSecrets | default list | toJson }}
      nodeSelector: {{- toYaml .Values.controllerManager.nodeSelector | nindent 8 }}
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: {{ include "cluster-api-provider-aws.controllerManagerServiceAccountName" . }}
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: capa-webhook-service-cert
      - name: credentials
        secret:
          secretName: {{ include "cluster-api-provider-aws.fullname" . }}-manager-bootstrap-credentials